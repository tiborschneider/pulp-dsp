import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.realpath(__file__), "../../..")))
from pulp_dsp_test import SweepVariable, DynamicVariable
from pulp_dsp_test import Argument, ArrayArgument, FixPointArgument, InplaceArgument, ParallelArgument
from pulp_dsp_test import generate_test

# Variables:
# ---------
# Can either be SweepVariable or Dynamic Variable. The name can then be used for the arguments (as
# value or as dimension).
#
# SweepVariable:   Type of variable which can be used to sweep over values.
# DynamicVariable: Variable that is determined by previously defined variables (SweepVariables or
#                  other Dynamic Variables). Dynamic variables need a funciton, which takes an
#                  environment as argument. This environment is a dictionary which maps the names
#                  of previously defined variables (position in the variables list) to their values.
#
# Arguments:
# ---------
# Defines the arguments of the funciton. These can be one of the following:
#
# Argument(name, type, value, use_l1):
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     value: Either a number, the name of a Variable or None for a random value
#     use_l1: boolean, for using l1 or l2 memory.
# FixedPointArgument(name, value, use_l1): Same as Argument, but only used for fixpoint
#                                          implementation
# ParallelArgument(name, value, use_l1): Same as Argument, but only used for parallel implementation
# ArrayArgument(name, type, length, value, use_l1)
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     length: Either a number, or the name of a Variable or a tuple for randint(min, max)
#     value: Either a number, the name of a Variable or None for a random value
#     use_l1: boolean, for using l1 or l2 memory.
# OutputArgument(name, type, length, use_l1, tolerance)
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     length: Either a number, or the name of a Variable or a tuple for randint(min, max)
#     use_l1: boolean, for using l1 or l2 memory.
#     tolerance: Either a constant (default 0) or a function which maps the version name to a
#                relative tolerance
# ReturnValue(ctype, use_l1, tolerance): Value which is returned by the function
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     use_l1: boolean, for using l1 or l2 memory.
#     tolerance: Either a constant (default 0) or a function which maps the version name to a
#                relative tolerance
#
# Implemented:
# -----------
# Dictionary which maps the device name ('ibex' or 'riscy') to a different dictionary. This second
# Dictionary maps the function type (i8, i16, i32, q8, q16, q32, f32) to a boolean to tell if this
# version is implemented on the given device and should be tested. Add the suffix _parallel to test
# the parallel implementation
#
# n_ops:
# -------
# Function with one parameter: env, which computes the number of operations (like macs) based on the
# sweep variables. Parameter env is a dict, mapping the name of the variable to the value for the
# specific test.

function_name = 'plp_mat_copy_stride'

variables = [
	SweepVariable('len_m', [8, 17, 26, 35]),
	SweepVariable('len_n', [11, 18, 25, 32]),
	SweepVariable('len_add_src', [1, 2], visible=False),
	SweepVariable('len_add_dst', [1, 2], visible=False),
	DynamicVariable('strideSrc', lambda e: e['len_n'] + e['len_add_src']),
	DynamicVariable('strideDst', lambda e: e['len_n'] + e['len_add_dst']),
	DynamicVariable('len_src', lambda e: e['len_m'] * e['strideSrc'], visible=False),
	DynamicVariable('len_dst', lambda e: e['len_m'] * e['strideDst'], visible=False),
]

arguments = [
	ArrayArgument('pSrc', 'var_type', 'len_src', None),
	Argument('M', 'uint32_t', 'len_m'),
	Argument('N', 'uint32_t', 'len_n'),
	Argument('strideSrc', 'uint32_t', 'strideSrc'),
	Argument('strideDst', 'uint32_t', 'strideDst'),
	ParallelArgument('nPE', 8),
	InplaceArgument('pDst', 'var_type', 'len_dst', tolerance=0),
]

implemented = {
	'riscy': {
		'i32': True,
		'i16': True,
		'i8':  True,
		'q32': False,
		'q16': False,
		'q8':  False,
		'f32': True,
		'i32_parallel': True,
		'i16_parallel': True,
		'i8_parallel':  True,
		'q32_parallel': False,
		'q16_parallel': False,
		'q8_parallel':  False,
		'f32_parallel': True
	},
	'ibex': {
		'i32': True,
		'i16': True,
		'i8':  True,
		'q32': False,
		'q16': False,
		'q8':  False,
		'f32': False,
	}
}

n_ops = lambda env: env['len_n'] * env['len_m']

TestConfig = c = generate_test(function_name, arguments, variables, implemented, use_l1=True, n_ops=n_ops)
